/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/timeCounterIndex.ts
var timeCounterIndex_exports = {};
__export(timeCounterIndex_exports, {
  TimeCounterSettingTab: () => TimeCounterSettingTab,
  default: () => TimeCounterPlugin
});
module.exports = __toCommonJS(timeCounterIndex_exports);
var import_obsidian9 = require("obsidian");

// src/widgets/counterWidget.ts
var import_view = require("@codemirror/view");
var import_obsidian2 = require("obsidian");

// src/utils/button.ts
var import_obsidian = require("obsidian");
function initButton(app, timeString, markType) {
  const counterEl = createSpan("cm-time-counter-icon");
  const dateFormat = app.plugins.getPlugin("time-counter").settings.timeFormat.trim();
  const parsedTimeFormat = !dateFormat && (dateFormat == null ? void 0 : dateFormat.length) === 0 ? "YYYYMMDDHHmmss" : dateFormat;
  const iconEl = counterEl.createSpan(markType === "start" ? "time-counter-start" : "time-counter-end");
  const button = new import_obsidian.ExtraButtonComponent(iconEl);
  let title, icon;
  if (markType === "start") {
    title = "Remove Time Counter Start Mark";
    icon = "rabbit";
  } else {
    title = "Remove Time Counter End Mark";
    icon = "turtle";
  }
  button.setIcon(icon);
  button.setTooltip((0, import_obsidian.moment)(timeString, parsedTimeFormat).format("YYYY-MM-DD HH:mm:ss"));
  return {
    counterEl,
    iconEl
  };
}

// src/widgets/counterWidget.ts
var CounterMarkWidget = class extends import_view.WidgetType {
  constructor(app, view, from, to, markType = "start", timeString) {
    super();
    this.app = app;
    this.view = view;
    this.from = from;
    this.to = to;
    this.markType = markType;
    this.timeString = timeString;
  }
  eq(other) {
    return other.view === this.view && other.from === this.from && other.to === this.to && other.timeString === this.timeString;
  }
  toDOM() {
    const { counterEl, iconEl } = initButton(this.app, this.timeString, this.markType);
    iconEl.addEventListener("click", (evt) => {
      const menu = new import_obsidian2.Menu();
      menu.addItem((item) => {
        item.setSection("action").setTitle("Edit Time").setIcon("pencil").onClick(() => {
          new TimeCounterModal(this.app, this.timeString, async (replace) => {
            this.view.dispatch({
              changes: {
                from: this.from,
                to: this.to,
                insert: `[${this.markType}::` + replace + "]"
              }
            });
          }).open();
        });
      }).addItem((item) => item.setTitle("Remove").setIcon("x").onClick(() => {
        this.view.dispatch({
          changes: {
            from: this.from,
            to: this.to,
            insert: ""
          }
        });
      })).showAtMouseEvent(evt);
    });
    return counterEl;
  }
  ignoreEvent(event) {
    return false;
  }
};
function counterPlugin(app) {
  return import_view.ViewPlugin.fromClass(class {
    constructor(view) {
      this.view = view;
      this.decorations = import_view.Decoration.none;
      this.matchDecorator = new import_view.MatchDecorator({
        regexp: /\B\[(start|end)::([^\]]*)\]\B/g,
        decoration: this.getDeco.bind(this)
      });
      this.decorations = this.matchDecorator.createDeco(view);
    }
    getDeco(match, _view, pos) {
      const from = pos;
      const to = pos + match[0].length;
      return import_view.Decoration.replace({
        widget: new CounterMarkWidget(app, this.view, from, to, match[1] === "start" ? "start" : "end", match[2])
      });
    }
    update(update) {
      if (!update.state.field(import_obsidian2.editorLivePreviewField)) {
        this.decorations = import_view.Decoration.none;
        return;
      }
      if (update.state.field(import_obsidian2.editorLivePreviewField) !== update.startState.field(import_obsidian2.editorLivePreviewField)) {
        this.decorations = this.matchDecorator.createDeco(update.view);
        return;
      }
      this.decorations = this.matchDecorator.updateDeco(update, this.decorations);
    }
  }, {
    decorations: (v) => v.decorations,
    provide: (plugin) => import_view.EditorView.atomicRanges.of((view) => {
      var _a;
      return ((_a = view.plugin(plugin)) == null ? void 0 : _a.decorations) || import_view.Decoration.none;
    })
  });
}
var TimeCounterModal = class extends import_obsidian2.Modal {
  constructor(app, value, cb) {
    super(app);
    this.cb = cb;
    this.currentValue = value;
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.toggleClass("time-mark-ask-modal", true);
    contentEl.createEl("div", { text: "Change Time" });
    const buttonContainer = contentEl.createDiv({ cls: "button-container" });
    const textComponent = new import_obsidian2.TextComponent(buttonContainer);
    textComponent.setValue(this.currentValue);
    textComponent.onChange(async (value) => {
      this.currentValue = value;
    });
    new import_obsidian2.ButtonComponent(buttonContainer).setClass("do-not-remove").setButtonText("OK").onClick(async () => {
      await this.cb(this.currentValue);
      this.close();
    });
  }
};

// src/widgets/lineMarkWidget.ts
var import_view2 = require("@codemirror/view");
var import_obsidian5 = require("obsidian");
var import_state = require("@codemirror/state");

// src/utils/domUtils.ts
var import_obsidian4 = require("obsidian");

// src/const.ts
var taskItemRegex = /-\s\[(.)\]/g;
var blankTaskItemRegex = /-\s\[\s\]/g;
var startTimestampRegex = /(\s)?\[start::([^\]]*)\]/;
var endTimestampRegex = /(\s)?\[end::([^\]]*)\]/;
var clockLineRegex = /^\s*CLOCK:(.*)=>\s*(\d{2}:\d{2}:\d{2})\s*$/;

// src/utils/utils.ts
var import_obsidian3 = require("obsidian");
function updateTimeEl(timeEl, timeString) {
  if (timeString.days > 0) {
    timeEl.createSpan({
      cls: "time-mark-days",
      text: `${timeString.days} days `
    });
  }
  if (timeString.hours > 0) {
    timeEl.createSpan({
      cls: "time-mark-hours",
      text: `${timeString.hours} hrs `
    });
  }
  if (timeString.minutes > 0) {
    timeEl.createSpan({
      cls: "time-mark-minutes",
      text: `${timeString.minutes} mins `
    });
  }
  if (timeString.days === 0 && timeString.hours === 0 && timeString.seconds >= 0) {
    timeEl.createSpan({
      cls: "time-mark-seconds",
      text: `${timeString.seconds} secs `
    });
  }
}
function formatDuration(start, end) {
  const duration = import_obsidian3.moment.duration(end.diff(start));
  const days = duration.days();
  const hours = duration.hours();
  const minutes = duration.minutes();
  const seconds = duration.seconds();
  let realDays = days;
  const months = duration.months();
  const years = duration.years();
  if (years > 0) {
    realDays += years * 365;
  }
  if (months > 0) {
    realDays += months * 30;
  }
  return {
    days: realDays,
    hours,
    minutes,
    seconds
  };
}
function calculateLength(time) {
  let secondsLength = 0;
  let minutesLength = 0;
  let hoursLength = 0;
  let daysLength = 0;
  if (time.days > 0) {
    daysLength = (time.days < 10 ? 1 : time.days.toString(10).length) + " days".length;
  }
  if (time.hours > 0) {
    hoursLength = (time.hours < 10 ? 1 : 2) + " hrs ".length;
  }
  if (time.minutes > 0) {
    minutesLength = (time.minutes < 10 ? 1 : 2) + " mins".length;
  }
  if (time.days === 0 && time.hours === 0 && (time.seconds === 0 && time.minutes === 0 || time.seconds > 0)) {
    secondsLength = (time.seconds < 10 ? 1 : 2) + " secs".length;
  }
  if (time.days === 0 && time.hours === 0 && time.minutes === 0) {
    return (time.seconds < 10 ? 3 : 2) + " secs".length;
  }
  return daysLength + hoursLength + minutesLength + secondsLength + 2;
}
function checkPairsAndLastMark(timeString) {
  const startTimeMarks = timeString.matchAll(new RegExp(startTimestampRegex, "g"));
  const endTimeMarks = timeString.matchAll(new RegExp(endTimestampRegex, "g"));
  const startTimeMarksArray = Array.from(startTimeMarks);
  const endTimeMarksArray = Array.from(endTimeMarks);
  const isPairs = startTimeMarksArray.length === endTimeMarksArray.length;
  const lastMark = isPairs ? startTimeMarksArray.length > 0 ? "end" : "none" : "start";
  return {
    isPairs,
    lastMark
  };
}
var checkIfBlankLastChar = (text) => /\s$/.test(text);
var checkIfTaskDate = (text) => {
  return text.match(/âœ… \d{4}-\d{2}-\d{2}/);
};
var checkBlockId = (text) => {
  return text.match(/\^[a-zA-Z0-9-]{2,}$/);
};
function calculateFromAndTo(line, lineText, type, app) {
  var _a, _b;
  const dateFormat = app.plugins.getPlugin("time-counter").settings.timeFormat.trim();
  const parsedTimeFormat = !dateFormat && (dateFormat == null ? void 0 : dateFormat.length) === 0 ? "YYYYMMDDHHmmss" : dateFormat;
  const timestamp = (0, import_obsidian3.moment)().format(parsedTimeFormat);
  const dateIndex = (_a = checkIfTaskDate(lineText)) == null ? void 0 : _a.index;
  const blockIdIndex = (_b = checkBlockId(lineText)) == null ? void 0 : _b.index;
  let insertText = "";
  if (dateIndex) {
    insertText = `${checkIfBlankLastChar(lineText.slice(0, dateIndex)) ? `` : ` `}[${type}::${timestamp}] `;
  } else if (blockIdIndex) {
    insertText = `${checkIfBlankLastChar(lineText.slice(0, blockIdIndex)) ? `` : ` `}[${type}::${timestamp}] `;
  } else {
    insertText = `${checkIfBlankLastChar(lineText) ? `` : ` `}[${type}::${timestamp}]`;
  }
  let targetFrom = dateIndex ? line.from + dateIndex : blockIdIndex ? line.from + blockIdIndex : line.to;
  let targetTo = dateIndex ? line.from + dateIndex : blockIdIndex ? line.from + blockIdIndex : line.to;
  return {
    targetFrom,
    targetTo,
    insertText
  };
}

// src/utils/domUtils.ts
var TIME_MARK_REGEX = "\\[(start|end)::([^\\]]*)\\]";
function splitTimeString(time) {
  var _a, _b;
  const markType = (_a = time.match(TIME_MARK_REGEX)) == null ? void 0 : _a[1];
  const timeString = (_b = time.match(TIME_MARK_REGEX)) == null ? void 0 : _b[2];
  return {
    timeString,
    markType
  };
}
var rules = [
  {
    regexPattern: "(\\[start::[^\\]]*\\])",
    creator: (app, matchedText) => {
      const { timeString } = splitTimeString(matchedText);
      if (!timeString)
        return createSpan("cm-time-counter-icon");
      const { counterEl } = initButton(app, timeString, "start");
      return counterEl;
    }
  },
  {
    regexPattern: "(\\[end::[^\\]]*\\])",
    creator: (app, matchedText) => {
      const { timeString } = splitTimeString(matchedText);
      if (!timeString)
        return createSpan("cm-time-counter-icon");
      const { counterEl } = initButton(app, timeString, "end");
      return counterEl;
    }
  }
];
function highlightTextInElement(app, element, rules2) {
  const walker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT);
  let node;
  const nodesToProcess = [];
  while (node = walker.nextNode()) {
    nodesToProcess.push(node);
  }
  nodesToProcess.forEach((node2) => {
    replaceTextWithElements(app, node2, rules2);
  });
}
function replaceTextWithElements(app, node, rules2) {
  var _a;
  if (node.nodeType === Node.TEXT_NODE) {
    let textContent = node.textContent || "";
    rules2.forEach((rule) => {
      let newTextContent = "";
      let match;
      const regex = new RegExp(rule.regexPattern, "g");
      let lastIndex = 0;
      while ((match = regex.exec(textContent)) !== null) {
        const part = match[0];
        const precedingText = textContent.substring(lastIndex, match.index);
        newTextContent += precedingText;
        const replacementElement = rule.creator(app, part);
        newTextContent += `<span data-replace>${replacementElement.outerHTML}</span>`;
        lastIndex = regex.lastIndex;
      }
      newTextContent += textContent.substring(lastIndex);
      textContent = newTextContent;
    });
    const parser = new DOMParser();
    const doc = parser.parseFromString(textContent, "text/html");
    Array.from(doc.body.childNodes).forEach((newNode) => {
      var _a2;
      if (newNode.nodeName === "SPAN" && newNode.getAttribute("data-replace")) {
        Array.from(newNode.childNodes).forEach((child) => {
          var _a3;
          (_a3 = node.parentNode) == null ? void 0 : _a3.insertBefore(child.cloneNode(true), node);
        });
      } else {
        (_a2 = node.parentNode) == null ? void 0 : _a2.insertBefore(newNode.cloneNode(true), node);
      }
    });
    (_a = node.parentNode) == null ? void 0 : _a.removeChild(node);
  }
}
function appendElementPreview(app, element, createAElement) {
  var _a, _b, _c, _d;
  const tasksPluginEnabled = app.plugins.getPlugin("obsidian-tasks-plugin");
  const startRegex = /\[(start::([^\]]*)\])/;
  const endRegex = /\[(end::([^\]]*)\])/;
  const walker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT);
  let node;
  while (node = walker.nextNode()) {
    const matches = [...node.textContent.matchAll(/\B\[start::([^\]]*)\]\B(.*?)\B\[end::([^\]]*)\]\B/g)];
    if (matches.length) {
      const timeMarks = [];
      for (const match of matches) {
        const timeStart = match[1];
        const timeEnd = match[3];
        timeMarks.push({
          timeStart,
          timeEnd
        });
      }
      let time = calculateMultiTime(app, timeMarks);
      const newElement = createAElement(time);
      const parent = node.parentNode;
      if ((parent == null ? void 0 : parent.nodeName) !== "LI" && tasksPluginEnabled) {
        if (((_a = parent == null ? void 0 : parent.parentNode) == null ? void 0 : _a.nodeName) === "SPAN") {
          const spanParent = (_d = (_c = (_b = parent.parentNode) == null ? void 0 : _b.parentNode) == null ? void 0 : _c.parentNode) == null ? void 0 : _d.parentNode;
          spanParent == null ? void 0 : spanParent.appendChild(newElement);
          continue;
        }
      }
      parent == null ? void 0 : parent.appendChild(newElement);
      continue;
    }
  }
}
function initInlineTimeCounterMark(time) {
  const counterEl = createSpan("cm-time-mark-icon");
  let timeString = time;
  const timeStringWidth = calculateLength(timeString) * 8;
  const timeEl = counterEl.createSpan({
    cls: "time-mark"
  });
  updateTimeEl(timeEl, timeString);
  counterEl.style.width = `${timeStringWidth + 20}px`;
  return counterEl;
}
function createLogbookTimeMarkInPreviewMode(element, createAElement) {
  var _a, _b, _c;
  const logbookNodes = [];
  const endNodes = [];
  const walker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT);
  let node;
  while (node = walker.nextNode()) {
    if (node.nodeType === Node.TEXT_NODE && node.textContent.includes(":logbook:")) {
      logbookNodes.push(node);
    }
    if (node.nodeType === Node.TEXT_NODE && node.textContent.includes(":END:")) {
      endNodes.push(node);
    }
  }
  if (logbookNodes.length !== endNodes.length) {
    console.error("Mismatched :logbook: and :END: pairs.");
    return;
  }
  for (let i = 0; i < logbookNodes.length; i++) {
    const startNode = logbookNodes[i];
    const endNode = endNodes[i];
    let currentNode = startNode;
    let logbookContent = "";
    while (currentNode && currentNode !== endNode.nextSibling) {
      logbookContent += currentNode.textContent + "\n";
      currentNode = currentNode.nextSibling;
    }
    const newElement = createAElement(logbookContent);
    if (!newElement)
      continue;
    if (element.nodeName === "DIV" && startNode.parentNode.nodeName === "P") {
      (_a = element.firstChild) == null ? void 0 : _a.prepend(newElement);
    } else if (((_b = startNode.parentNode) == null ? void 0 : _b.nodeName) === "LI") {
      (_c = startNode.parentNode) == null ? void 0 : _c.prepend(newElement);
    }
  }
}
function initLogbookTimeCounterMark(content) {
  var _a;
  const counterEl = createSpan("cm-time-mark-icon");
  const lines = content.trim().split("\n");
  const match = lines.filter((line) => clockLineRegex.test(line));
  if (match.length === 0)
    return counterEl;
  let totalTime = (0, import_obsidian4.moment)("00:00:00", "HH:mm:ss");
  for (let i = 0; i < match.length; i++) {
    let time = (_a = match[i].match(clockLineRegex)) == null ? void 0 : _a[2];
    if (time) {
      let date = (0, import_obsidian4.moment)(time, "HH:mm:ss");
      if (date.isValid()) {
        totalTime.add(import_obsidian4.moment.duration(time));
      }
    }
  }
  const duration = formatDuration((0, import_obsidian4.moment)("00:00:00", "HH:mm:ss"), totalTime);
  const logBookEl = counterEl.createSpan({
    cls: "time-mark"
  });
  const timeStringWidth = calculateLength(duration) * 8;
  updateTimeEl(logBookEl, duration);
  counterEl.style.width = `${timeStringWidth}px`;
  return counterEl;
}

// src/widgets/lineMarkWidget.ts
function isTimeMarkArray2(time) {
  return Array.isArray(time);
}
function calculateMultiTime(app, time) {
  const dateFormat = app.plugins.getPlugin("time-counter").settings.timeFormat.trim();
  const parsedTimeFormat = !dateFormat && (dateFormat == null ? void 0 : dateFormat.length) === 0 ? "YYYYMMDDHHmmss" : dateFormat;
  let totalDuration = {
    days: 0,
    hours: 0,
    minutes: 0,
    seconds: 0
  };
  for (let i = 0; i < time.length; i++) {
    const startMoment = (0, import_obsidian5.moment)(time[i].timeStart, parsedTimeFormat);
    const endMoment = (0, import_obsidian5.moment)(time[i].timeEnd, parsedTimeFormat);
    const duration = formatDuration(startMoment, endMoment);
    totalDuration.days += duration.days;
    totalDuration.hours += duration.hours;
    totalDuration.minutes += duration.minutes;
    totalDuration.seconds += duration.seconds;
  }
  return totalDuration;
}
function calculateSingleTime2(app, time) {
  const dateFormat = app.plugins.getPlugin("time-counter").settings.timeFormat.trim();
  const parsedTimeFormat = !dateFormat && (dateFormat == null ? void 0 : dateFormat.length) === 0 ? "YYYYMMDDHHmmss" : dateFormat;
  const start = (0, import_obsidian5.moment)(time.timeStart, parsedTimeFormat);
  const end = (0, import_obsidian5.moment)(time.timeEnd, parsedTimeFormat);
  if (!start.isValid() || !end.isValid())
    return null;
  return formatDuration(start, end);
}
var TimeMarkWidget = class extends import_view2.WidgetType {
  constructor(app, view, from, to, time) {
    super();
    this.app = app;
    this.view = view;
    this.from = from;
    this.to = to;
    this.time = time;
  }
  eq(other) {
    return other.view === this.view && other.from === this.from && other.to === this.to && other.time === this.time;
  }
  toDOM() {
    const isMulti = isTimeMarkArray2(this.time);
    let timeString = isMulti ? calculateMultiTime(this.app, this.time) : calculateSingleTime2(this.app, this.time);
    if (!timeString) {
      return createSpan("cm-time-mark-icon");
    }
    return initInlineTimeCounterMark(timeString);
  }
  ignoreEvent(event) {
    return false;
  }
};
function buildCounterDecos(app, view) {
  const builder = new import_state.RangeSetBuilder();
  const seen = /* @__PURE__ */ new Set();
  for (const { from, to } of view.visibleRanges) {
    for (let pos = from; pos <= to; ) {
      const line = view.state.doc.lineAt(pos);
      const matches = [...line.text.matchAll(/\B\[start::([^\]]*)\]\B(.*?)\B\[end::([^\]]*)\]\B/g)];
      if (matches.length) {
        const timeMarks = [];
        for (const match of matches) {
          if (seen.has(line.from) && matches.length === 1)
            break;
          seen.add(line.from);
          const timeStart = match[1];
          const timeEnd = match[3];
          timeMarks.push({
            timeStart,
            timeEnd
          });
        }
        builder.add(line.to, line.to, import_view2.Decoration.widget({
          widget: new TimeMarkWidget(app, view, pos, line.to, timeMarks.length > 1 ? timeMarks : timeMarks[0]),
          side: 1
        }));
      }
      pos = line.to + 1;
    }
  }
  return builder.finish();
}
var lineEndWidgetPlugin = (app) => {
  return import_view2.ViewPlugin.fromClass(class {
    constructor(view) {
      this.decorations = buildCounterDecos(app, view);
    }
    update(update) {
      if (update.docChanged || update.viewportChanged) {
        this.decorations = buildCounterDecos(app, update.view);
      }
    }
  }, {
    decorations: (v) => v.decorations
  });
};

// src/widgets/taskToggle.ts
var import_state2 = require("@codemirror/state");
var import_view3 = require("@codemirror/view");
var insertTimestamp = (update, condition, type, app) => {
  const changes = [];
  const timestampRegex = type === "start" ? startTimestampRegex : endTimestampRegex;
  update.changes.iterChanges((fromA, toA, fromB, toB, inserted) => {
    if (inserted.toString().match(timestampRegex) || inserted.toString().split("\n").length > 1)
      return;
    const fromLine = update.state.doc.lineAt(fromA);
    if (!update.state.doc.line(fromLine.number).text.startsWith("- "))
      return;
    const toLine = update.state.doc.lineAt(fromB);
    for (let i = fromLine.number; i <= toLine.number; i++) {
      const line = update.state.doc.line(i);
      const lineText = line.text;
      const current = checkPairsAndLastMark(lineText);
      if (condition(lineText, inserted.toString())) {
        if (type === "end" && !(current.lastMark === "start"))
          return;
        if (type === "start" && current.lastMark === "start")
          return;
        const change = calculateFromAndTo(line, lineText, type, app);
        changes.push({
          from: change.targetFrom,
          to: change.targetTo,
          insert: change.insertText
        });
      }
    }
  });
  return changes;
};
var removeTimestamps = (lineText, type) => {
  let timestampRegex = type === "start" ? startTimestampRegex : endTimestampRegex;
  if (!timestampRegex.global) {
    const flags = timestampRegex.flags + "g";
    timestampRegex = new RegExp(timestampRegex.source, flags);
  }
  let match;
  let lastMatch = null;
  while ((match = timestampRegex.exec(lineText)) !== null) {
    lastMatch = match;
  }
  if (lastMatch) {
    const timestampPos = lineText.indexOf(lastMatch[0]);
    return {
      from: timestampPos,
      to: timestampPos + lastMatch[0].length
    };
  }
  return null;
};
var addTaskTimeMarkPlugin = (app) => {
  return import_view3.ViewPlugin.fromClass(class {
    update(update) {
      if (!update.docChanged)
        return;
      if (update.transactions.some((tr) => tr.annotation(import_state2.Transaction.userEvent) === "undo" || tr.annotation(import_state2.Transaction.userEvent) === "redo" || tr.annotation(import_state2.Transaction.userEvent) === "plugin-update"))
        return;
      const startChanges = insertTimestamp(update, (lineText, inserted) => {
        return new RegExp(taskItemRegex).test(lineText) && (/- \[\s\]/g.test(inserted) || /-\s\[\s\]$/g.test(lineText));
      }, "start", app);
      const endChanges = insertTimestamp(update, (lineText, inserted) => {
        return new RegExp(taskItemRegex).test(lineText) && (/- \[[^\s]\]/g.test(inserted) || /-\s\[[^\s]\]/g.test(lineText) && /(x|X)/g.test(inserted));
      }, "end", app);
      const changes = [...startChanges, ...endChanges];
      if (update.transactions.some((tr) => tr.annotation(import_state2.Transaction.userEvent) === "plugin-update"))
        return;
      if (changes.length > 0) {
        setTimeout(() => {
          const tr = update.view.state.update({
            changes: import_state2.ChangeSet.of(changes, update.view.state.doc.length)
          });
          update.view.dispatch(tr);
        }, 0);
      }
    }
  });
};
var removeTaskTimeMarkPlugin = import_view3.ViewPlugin.fromClass(class {
  update(update) {
    if (!update.docChanged)
      return;
    if (update.transactions.some((tr) => tr.annotation(import_state2.Transaction.userEvent) === "undo" || tr.annotation(import_state2.Transaction.userEvent) === "redo" || tr.annotation(import_state2.Transaction.userEvent) === "plugin-update"))
      return;
    let changes = [];
    update.changes.iterChanges((fromA, toA, fromB, toB, inserted) => {
      const fromLine = update.state.doc.lineAt(fromA);
      const toLine = update.state.doc.lineAt(fromB);
      if (!inserted.toString().includes("- ") && !inserted.toString().includes("- [ ]") && !/\s/.test(inserted.toString())) {
        return;
      }
      if (!fromLine.text.trim().startsWith("- ") && !fromLine.text.trim().startsWith("- [ ]")) {
        return;
      }
      const current = checkPairsAndLastMark(fromLine.text);
      if (current.lastMark === "start" && !/^-$/g.test(inserted.toString().trim())) {
        return;
      }
      const insertBlankTask = inserted.toString().includes("- [ ]");
      const insertBulletMark = /^-$/.test(inserted.toString().trim());
      const insertBlankWord = /\s/.test(inserted.toString()) && fromLine.text.trim().startsWith("- [ ]");
      if (current.lastMark === "end" && !(insertBulletMark || insertBlankWord) || current.lastMark === "end" && insertBlankTask) {
        return;
      }
      for (let i = fromLine.number; i <= toLine.number; i++) {
        const line = update.state.doc.line(i);
        const lineText = line.text;
        const matchTaskItem = new RegExp(taskItemRegex).test(lineText);
        const containsStartTimestamp = new RegExp(startTimestampRegex).test(lineText);
        const containsEndTimestamp = new RegExp(endTimestampRegex).test(lineText);
        if (!matchTaskItem && containsStartTimestamp && containsEndTimestamp) {
          const start = removeTimestamps(lineText, "start");
          const end = removeTimestamps(lineText, "end");
          if (start && !end)
            changes.push({ from: line.from + start.from, to: line.from + start.to });
          if (end && !start)
            changes.push({ from: line.from + end.from, to: line.from + end.to });
          if (start && end) {
            changes.push({ from: line.from + start.from, to: line.from + start.to });
            changes.push({ from: line.from + end.from, to: line.from + end.to });
          }
        }
        if (matchTaskItem && new RegExp(blankTaskItemRegex).test(lineText) && containsEndTimestamp) {
          const end = removeTimestamps(lineText, "end");
          if (end)
            changes.push({ from: line.from + end.from, to: line.from + end.to });
        }
      }
    });
    if (update.transactions.some((tr) => tr.annotation(import_state2.Transaction.userEvent) === "plugin-update"))
      return;
    if (changes.length > 0) {
      setTimeout(() => {
        const tr = update.view.state.update({
          changes: import_state2.ChangeSet.of(changes, update.view.state.doc.length),
          annotations: import_state2.Transaction.userEvent.of("plugin-update")
        });
        update.view.dispatch(tr);
      }, 0);
    }
  }
});

// src/utils/line.ts
var import_obsidian6 = require("obsidian");
var insertMark = (app, editor, type) => {
  const format = app.plugins.getPlugin("time-counter").settings.timeFormat.trim();
  const time = (0, import_obsidian6.moment)().format(format);
  const selection = editor.getSelection();
  if (selection.trim().length > 0)
    return;
  editor.replaceSelection(`[${type}::${time}]`);
};
var checkExistStartMark = (editor) => {
  const getPos = editor.getCursor("from");
  const getLine = editor.getLine(getPos.line);
  const match = getLine.match(startTimestampRegex);
  if (match)
    return true;
  return false;
};

// src/widgets/logBookWidget.ts
var import_view4 = require("@codemirror/view");
var import_state3 = require("@codemirror/state");
var logbookField = import_state3.StateField.define({
  create: (state) => {
    var _a;
    let ranges = [];
    let lines = [];
    if (state.doc.length > 0) {
      lines = Array.from({ length: state.doc.lines }, (_, i) => i + 1);
    }
    for (let n of lines) {
      let line = state.doc.line(n);
      let fromIdx = line.text.indexOf(":logbook:");
      if (fromIdx !== -1) {
        let endIdx = -1;
        for (let i = n; i < state.doc.length; i++) {
          if (((_a = state.doc.line(i)) == null ? void 0 : _a.text.indexOf(":END:")) !== -1) {
            endIdx = state.doc.line(i).to;
            break;
          }
        }
        if (endIdx !== -1) {
          let from = state.doc.line(n).from - 1;
          ranges.push({ from, to: endIdx });
        }
      }
    }
    return ranges;
  },
  update(value, tr) {
    var _a;
    if (!tr.docChanged)
      return value;
    let ranges = [];
    let lines = [];
    if (tr.state.doc.length > 0) {
      lines = Array.from({ length: tr.state.doc.lines }, (_, i) => i + 1);
    }
    for (let n of lines) {
      let line = tr.state.doc.line(n);
      let fromIdx = line.text.indexOf(":logbook:");
      if (fromIdx !== -1) {
        let endIdx = -1;
        for (let i = n; i < tr.newDoc.length; i++) {
          const currentEditing = tr.newSelection.ranges[0].from;
          const lineNum = tr.newDoc.lineAt(currentEditing).number;
          if (lineNum === i) {
            break;
          }
          if (((_a = tr.newDoc.line(i)) == null ? void 0 : _a.text.indexOf(":END:")) !== -1) {
            endIdx = tr.newDoc.line(i).to;
            break;
          }
        }
        if (endIdx !== -1) {
          let from = tr.state.doc.line(n).from - 1;
          ranges.push({ from, to: endIdx });
        }
      }
    }
    return ranges;
  }
});
var InlineLogbook = class extends import_view4.WidgetType {
  constructor(view, from, to, content) {
    super();
    this.view = view;
    this.from = from;
    this.to = to;
    this.content = content;
  }
  eq(other) {
    return other.view === this.view && other.from === this.from && other.to === this.to && other.content === this.content;
  }
  toDOM() {
    return initLogbookTimeCounterMark(this.content);
  }
  ignoreEvent(event) {
    return false;
  }
};
var logbookDecorations = import_state3.StateField.define({
  create: (state) => {
    let builder = new import_state3.RangeSetBuilder();
    let doc = state.doc;
    let logbookRanges = state.field(logbookField, false) || [];
    for (let range of logbookRanges) {
      let content = doc.sliceString(range.from, range.to);
      let widget = import_view4.Decoration.widget({
        widget: new InlineLogbook(state, range.from, range.to, content)
      });
      builder.add(range.from, range.from, widget);
    }
    return builder.finish();
  },
  update(decorations, tr) {
    if (!tr.docChanged)
      return decorations;
    let builder = new import_state3.RangeSetBuilder();
    let doc = tr.state.doc;
    let logbookRanges = tr.state.field(logbookField, false) || [];
    for (let range of logbookRanges) {
      let content = doc.sliceString(range.from, range.to);
      let widget = import_view4.Decoration.widget({
        widget: new InlineLogbook(tr.state, range.from, range.to, content)
      });
      builder.add(range.from, range.from, widget);
    }
    return builder.finish();
  },
  provide: (f) => import_view4.EditorView.decorations.from(f)
});

// src/widgets/playWidget.ts
var import_view5 = require("@codemirror/view");
var import_obsidian7 = require("obsidian");
var import_state4 = require("@codemirror/state");
var PlayWidget = class extends import_view5.WidgetType {
  constructor(app, view, from, type, line) {
    super();
    this.app = app;
    this.view = view;
    this.from = from;
    this.type = type;
    this.line = line;
  }
  eq(other) {
    return other.view === this.view && other.from === this.from && other.type === this.type && other.line === this.line;
  }
  toDOM() {
    let icon = createSpan("cm-time-counter-play-button");
    if (this.type === "start") {
      (0, import_obsidian7.setIcon)(icon, "timer");
      icon.toggleClass("cm-play-button-end", false);
    } else if (this.type === "end") {
      (0, import_obsidian7.setIcon)(icon, "timer-off");
      icon.toggleClass("cm-play-button-end", true);
    }
    icon.addEventListener("click", () => {
      const change = calculateFromAndTo(this.line, this.line.text, this.type, this.app);
      const tr = this.view.state.update({
        changes: { from: change.targetFrom, to: change.targetTo, insert: change.insertText },
        scrollIntoView: true,
        annotations: import_state4.Transaction.userEvent.of("plugin-update"),
        selection: {
          anchor: change.targetTo + change.insertText.length || 0,
          head: change.targetTo + change.insertText.length || 0
        }
      });
      this.view.dispatch(tr);
    });
    return icon;
  }
  ignoreEvent(event) {
    return false;
  }
};
function buildPlayDecos(app, view) {
  const builder = new import_state4.RangeSetBuilder();
  const seen = /* @__PURE__ */ new Set();
  for (const { from, to } of view.visibleRanges) {
    for (let pos = from; pos <= to; ) {
      const line = view.state.doc.lineAt(pos);
      if (!seen.has(line.from)) {
        seen.add(line.from);
        const insertMarks = checkPairsAndLastMark(line.text);
        const currentType = insertMarks.lastMark === "start" ? "end" : "start";
        builder.add(line.from, line.from, import_view5.Decoration.widget({
          widget: new PlayWidget(app, view, pos, currentType, line),
          side: -1
        }));
      }
      pos = line.to + 1;
    }
  }
  return builder.finish();
}
var playWidgetPlugin = (app) => {
  return import_view5.ViewPlugin.fromClass(class {
    constructor(view) {
      this.decorations = buildPlayDecos(app, view);
    }
    update(update) {
      if (update.docChanged || update.viewportChanged) {
        this.decorations = buildPlayDecos(app, update.view);
      }
    }
  }, {
    decorations: (v) => v.decorations
  });
};

// src/crypto/index.ts
var crypto = __toESM(require("crypto"));
var import_obsidian8 = require("obsidian");
var SERVER_URL = "api.boninall.com";
var API_PATH = "/ob/validate";
var Registration = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.dbPath = this.plugin.app.vault.configDir + "/register.db";
  }
  async init() {
    const fileExists = await this.plugin.app.vault.adapter.exists((0, import_obsidian8.normalizePath)(this.dbPath));
    if (!fileExists) {
      const random = crypto.randomBytes(25).toString("hex");
      const doubleMD5 = this.md5(this.md5(random));
      await this.plugin.app.vault.create(this.dbPath, doubleMD5);
    }
  }
  async getMachineCode() {
    const fileExists = await this.plugin.app.vault.adapter.exists((0, import_obsidian8.normalizePath)(this.dbPath));
    if (!fileExists) {
      return "";
    }
    const content = await this.plugin.app.vault.adapter.read((0, import_obsidian8.normalizePath)(this.dbPath));
    return this.md5(this.md5(content));
  }
  async getRegCode() {
    const regCode = this.plugin.settings.regCode;
    if (regCode) {
      return regCode;
    } else {
      return "";
    }
  }
  async checkStatus(machineId) {
    const url = `https://${SERVER_URL}${API_PATH}`;
    const method = "POST";
    const contentType = "application/json";
    const regCode = await this.getRegCode();
    if (!regCode) {
      return "";
    }
    const body = JSON.stringify({
      machineId,
      resKey: "obsidian-" + this.plugin.manifest.id,
      regCode
    });
    const headers = {
      "Content-Type": contentType
    };
    const request = {
      url,
      method,
      contentType,
      body,
      headers
    };
    try {
      const response = (0, import_obsidian8.requestUrl)(request);
      const responseBody = await response.text;
      return responseBody;
    } catch (error) {
      console.error("Request failed:", error);
      return "";
    }
  }
  md5(data) {
    return crypto.createHash("md5").update(data).digest("hex");
  }
  sha1(data) {
    return crypto.createHash("sha1").update(data).digest("hex");
  }
};

// src/timeCounterIndex.ts
var DEFAULT_SETTINGS = {
  timeFormat: "YYYYMMDDHHmmss",
  alreadyNoticeFormat: false,
  alreadyNoticePro: false,
  regCode: ""
};
var TimeCounterPlugin = class extends import_obsidian9.Plugin {
  async onload() {
    await this.loadSettings();
    await this.initRegister();
    this.addSettingTab(new TimeCounterSettingTab(this.app, this.registration, this));
    if (!this.settings.alreadyNoticeFormat) {
      new NoticeModal(this.app, "", async (ready) => {
        if (!ready) {
          this.settings.alreadyNoticeFormat = true;
          await this.saveSettings();
        }
      }).open();
    }
    this.addIcons();
    this.registerEditorExtension([lineEndWidgetPlugin(this.app), addTaskTimeMarkPlugin(this.app)]);
    this.registerContextMenu();
    this.registerCommands();
    this.registerMarkdownPostProcessor((el, ctx) => {
      appendElementPreview(this.app, el, initInlineTimeCounterMark);
    });
    this.app.workspace.onLayoutReady(() => {
      this.checkStatus(() => {
        this.registerEditorExtension([
          playWidgetPlugin(this.app),
          counterPlugin(this.app),
          removeTaskTimeMarkPlugin,
          logbookField,
          logbookDecorations
        ]);
        this.registerMarkdownPostProcessor((el, ctx) => {
          highlightTextInElement(this.app, el, rules);
          createLogbookTimeMarkInPreviewMode(el, initLogbookTimeCounterMark);
        });
      });
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  addIcons() {
    (0, import_obsidian9.addIcon)("turtle", `<g id="surface1"><path style="fill:none;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;" d="M 12 10.000312 L 13.999688 13.999688 L 13.999688 16.999688 C 13.999688 17.551875 14.447812 18 15 18 L 16.999688 18 C 17.551875 18 18 17.551875 18 16.999688 L 18 13.999688 C 18 9.582187 14.417813 6 10.000312 6 C 5.581875 6 1.999687 9.582187 1.999687 13.999688 L 1.999687 16.999688 C 1.999687 17.551875 2.447812 18 3 18 L 4.999687 18 C 5.551875 18 6 17.551875 6 16.999688 L 6 13.999688 L 7.999687 10.000312 Z M 12 10.000312 " transform="matrix(4.166667,0,0,4.166667,0,0)"/><path style="fill:none;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;" d="M 4.819687 7.900313 L 7.999687 10.000312 " transform="matrix(4.166667,0,0,4.166667,0,0)"/><path style="fill:none;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;" d="M 15.18 7.900313 L 12 10.000312 " transform="matrix(4.166667,0,0,4.166667,0,0)"/><path style="fill:none;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;" d="M 16.930312 10.000312 L 19.999688 10.000312 C 21.105 10.000312 22.000312 10.895625 22.000312 12 C 22.000312 13.104375 21.105 13.999688 19.999688 13.999688 L 1.999687 13.999688 " transform="matrix(4.166667,0,0,4.166667,0,0)"/></g>`);
    (0, import_obsidian9.addIcon)("rabbit", `<g id="surface1"><path style="fill:none;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;" d="M 19.999688 8.539687 L 19.999688 4.000312 C 19.999688 2.895 19.104375 1.999687 18 1.999687 C 16.895625 1.999687 16.000312 2.895 16.000312 4.000312 L 16.000312 7.000312 " transform="matrix(4.166667,0,0,4.166667,0,0)"/><path style="fill:none;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;" d="M 18 21 L 10.000312 21 C 7.790625 21 6 19.209375 6 16.999688 C 6 13.134375 9.134062 10.000312 13.000312 10.000312 L 13.2 10.000312 L 9.6 6.400313 C 8.826562 5.626875 8.826562 4.373437 9.6 3.6 C 10.373437 2.826563 11.626875 2.826563 12.400313 3.6 L 15.799687 7.000312 L 16.000312 7.000312 C 19.300313 7.000312 22.000312 9.700312 22.000312 13.000312 L 22.000312 13.999688 C 22.000312 15.105 21.105 16.000312 19.999688 16.000312 L 19.000312 16.000312 C 17.299688 16.000312 16.000312 17.299688 16.000312 19.000312 " transform="matrix(4.166667,0,0,4.166667,0,0)"/><path style="fill:none;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;" d="M 7.609687 12.529687 C 6.827812 11.145 5.1 10.611562 3.673125 11.314687 C 2.245312 12.016875 1.615312 13.711875 2.235937 15.17625 C 2.856562 16.640625 4.512187 17.36625 6.010312 16.83 " transform="matrix(4.166667,0,0,4.166667,0,0)"/><path style="fill:none;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;" d="M 13.000312 16.000312 C 14.183438 15.998437 15.257812 16.693125 15.741562 17.773125 C 16.225313 18.854062 16.029375 20.117812 15.24 21 " transform="matrix(4.166667,0,0,4.166667,0,0)"/><path style="fill:none;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(0%,0%,0%);stroke-opacity:1;stroke-miterlimit:4;" d="M 18 12 L 18.010312 12 " transform="matrix(4.166667,0,0,4.166667,0,0)"/></g>`);
  }
  registerContextMenu() {
    this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor) => {
      if (!editor) {
        return;
      }
      const selection = editor.getSelection();
      menu.addItem((item) => {
        const subMenu = item.setSection("action").setTitle(`Time Counter`).setIcon("alarm-clock").setSubmenu();
        subMenu.addItem((item2) => {
          item2.setIcon("rabbit").setTitle("Mark Start Time").setDisabled(!!selection.trim()).onClick(() => insertMark(this.app, editor, "start"));
        });
        subMenu.addItem((item2) => {
          item2.setIcon("turtle").setTitle("Mark End Time").setDisabled(!!selection.trim() || !checkExistStartMark(editor)).onClick(() => insertMark(this.app, editor, "end"));
        });
      });
    }));
  }
  registerCommands() {
    this.addCommand({
      id: "mark-as-start",
      name: "Mark Time Start",
      editorCallback: (editor) => insertMark(this.app, editor, "start")
    });
    this.addCommand({
      id: "mark-as-end",
      name: "Mark Time End",
      editorCallback: (editor) => {
        if (!checkExistStartMark(editor))
          return;
        insertMark(this.app, editor, "end");
      }
    });
    this.addCommand({
      id: "remove-all-markers",
      name: "Remove All Time Markers In Current File",
      callback: async () => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian9.MarkdownView);
        if (markdownView) {
          const file = markdownView.file;
          let ready = false;
          new AskModal(this.app, "to remove", async (already) => {
            ready = already;
            if (ready && file) {
              const fileContent = await this.app.vault.cachedRead(file);
              const newFileContent = fileContent.replace(/(\s)?\[start::([^\]]*)\]|(\s)?\[end::([^\]]*)\]/g, "");
              await this.app.vault.modify(file, newFileContent);
            }
          }).open();
          return;
        }
        new import_obsidian9.Notice("No active file open");
      }
    });
  }
  async initRegister() {
    this.registration = new Registration(this);
    await this.registration.init();
  }
  async checkStatus(cb) {
    const machineId = await this.registration.getMachineCode();
    const status = await this.registration.checkStatus(machineId);
    if (!status) {
      if (!this.settings.alreadyNoticePro) {
        new import_obsidian9.Notice("Some Features is not available in free version");
        this.settings.alreadyNoticePro = true;
        await this.saveSettings();
      }
      return;
    }
    const result = JSON.parse(status);
    result.message === "succeed" ? result.regCode ? await this.saveStatus(result.regCode, cb) : result.expiryDate && (0, import_obsidian9.moment)(result.expiryDate, "YYYYMMDD").isBefore((0, import_obsidian9.moment)()) || cb() : this.settings.alreadyNoticePro || new import_obsidian9.Notice("Please activate Time Mark plugin");
  }
  async saveStatus(regCode, cb) {
    this.settings.regCode = regCode;
    this.settings.alreadyNoticePro = true;
    cb();
    await this.saveSettings();
  }
};
var AskModal = class extends import_obsidian9.Modal {
  constructor(app, title, cb) {
    super(app);
    this.title = title;
    this.cb = cb;
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.toggleClass("time-mark-ask-modal", true);
    contentEl.createEl("div", { text: "Are you sure" } + this.title + "?");
    const buttonContainer = contentEl.createDiv({ cls: "button-container" });
    new import_obsidian9.ButtonComponent(buttonContainer).setClass("remove-ready").setWarning().setButtonText("Yes").onClick(async () => {
      await this.cb(true);
      this.close();
    });
    new import_obsidian9.ButtonComponent(buttonContainer).setClass("do-not-remove").setButtonText("No").onClick(async () => {
      await this.cb(false);
      this.close();
    });
  }
};
var NoticeModal = class extends import_obsidian9.Modal {
  constructor(app, title, cb) {
    super(app);
    this.title = title;
    this.cb = cb;
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.toggleClass("time-mark-notice-modal", true);
    contentEl.createEl("div", { text: "Time Format for time counter", cls: "time-counter-modal-title" });
    contentEl.createEl("div", {
      text: "Default time format is YYYYMMDDHHmmss. but you can change it in settings now!",
      cls: "time-counter-notice"
    });
    contentEl.createEl("div", { text: "Do you want to go to settings?", cls: "time-counter-notice" });
    const buttonContainer = contentEl.createDiv({ cls: "button-container" });
    new import_obsidian9.ButtonComponent(buttonContainer).setClass("go-settings").setWarning().setButtonText("Go to change").onClick(async () => {
      await this.cb(false);
      this.app.setting.open();
      this.app.setting.openTabById("time-counter");
      this.close();
    });
    new import_obsidian9.ButtonComponent(buttonContainer).setClass("do-not-go-settings").setButtonText("Confirm").onClick(async () => {
      await this.cb(false);
      this.close();
    });
  }
  async onClose() {
    super.onClose();
    await this.cb(false);
  }
};
var TimeCounterSettingTab = class extends import_obsidian9.PluginSettingTab {
  constructor(app, registration, plugin) {
    super(app, plugin);
    this.applyDebounceTimer = 0;
    this.plugin = plugin;
    this.registration = registration;
  }
  applySettingsUpdate() {
    clearTimeout(this.applyDebounceTimer);
    const plugin = this.plugin;
    this.applyDebounceTimer = window.setTimeout(() => {
      plugin.saveSettings();
    }, 100);
  }
  async hide() {
  }
  async display() {
    const { containerEl } = this;
    this.containerEl.empty();
    const desc = document.createDocumentFragment();
    desc.append("Use ", createEl("a", { href: "https://momentjs.com/docs/#/displaying/" }, (el) => {
      el.innerText = "Moment.js format";
    }), " to customize the time format. ", createEl("span", {
      text: "Please reload Obsidian after changing the format.",
      cls: "time-counter-desc"
    }));
    new import_obsidian9.Setting(containerEl).setName("Time Format").setDesc(desc).addText((text) => {
      text.setPlaceholder(DEFAULT_SETTINGS.timeFormat).setValue(this.plugin.settings.timeFormat).onChange(async (value) => {
        this.plugin.settings.timeFormat = value;
        this.applySettingsUpdate();
      });
    });
    this.checkPro(containerEl);
  }
  async checkPro(containerEl) {
    const machineCode = await this.registration.getMachineCode();
    const status = await this.registration.checkStatus(machineCode);
    if (status) {
      if (JSON.parse(status).message === "succeed") {
        const expiryDate = JSON.parse(status).expiryDate;
        const proStatusDesc = document.createDocumentFragment();
        proStatusDesc.append("You have purchased the Time-Counter Pro version, with an activation date until ", createEl("span", {
          text: (0, import_obsidian9.moment)(expiryDate, "YYYYMMDD").format("YYYY-MM-DD"),
          cls: "time-counter-desc"
        }), ". ");
        new import_obsidian9.Setting(containerEl).setName("Version Status").setDesc(proStatusDesc);
        return;
      }
    }
    const statusDesc = document.createDocumentFragment();
    statusDesc.append("Please enter the register code to activate the pro version. ", createEl("span", {
      text: "Please reload Obsidian after changing the register code.",
      cls: "time-counter-desc"
    }));
    new import_obsidian9.Setting(containerEl).setName("Register Code").setDesc(statusDesc).addButton((button) => {
      button.setButtonText("Activate").setCta().onClick(async () => {
        const regCode = this.plugin.settings.regCode;
        if (regCode === "") {
          new import_obsidian9.Notice("Please enter the register code!");
          return;
        }
        const machineCode2 = await this.registration.getMachineCode();
        const status2 = await this.registration.checkStatus(machineCode2);
        if (status2) {
          if (JSON.parse(status2).message === "succeed") {
            this.plugin.settings.regCode = JSON.parse(status2).regCode || regCode;
            this.applySettingsUpdate();
            if (JSON.parse(status2).regCode && (0, import_obsidian9.moment)(JSON.parse(status2).expiryDate, "YYYYMMDD").isAfter((0, import_obsidian9.moment)())) {
              this.plugin.registerEditorExtension([
                playWidgetPlugin(this.app),
                counterPlugin(this.app),
                removeTaskTimeMarkPlugin,
                logbookField,
                logbookDecorations
              ]);
              this.plugin.registerMarkdownPostProcessor((el, ctx) => {
                highlightTextInElement(this.app, el, rules);
                createLogbookTimeMarkInPreviewMode(el, initLogbookTimeCounterMark);
              });
            }
            new import_obsidian9.Notice("Activation succeeded!");
            await this.display();
            return;
          }
        }
        new import_obsidian9.Notice("Activation failed!");
      });
    }).addText((text) => {
      text.setPlaceholder(DEFAULT_SETTINGS.regCode).setValue(this.plugin.settings.regCode).onChange(async (value) => {
        this.plugin.settings.regCode = value;
        this.applySettingsUpdate();
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
